#ifndef CHIP8_EMU_H
#define CHIP8_EMU_H

#include "display.h"
#include "instruction.h"
#include <cstdint>
#pragma once
// font sprites
/*
0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
0x20, 0x60, 0x20, 0x20, 0x70, // 1
0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
0x90, 0x90, 0xF0, 0x10, 0x10, // 4
0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
0xF0, 0x10, 0x20, 0x40, 0x40, // 7
0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
0xF0, 0x90, 0xF0, 0x90, 0x90, // A
0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
0xF0, 0x80, 0x80, 0x80, 0xF0, // C
0xE0, 0x90, 0x90, 0x90, 0xE0, // D
0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
0xF0, 0x80, 0xF0, 0x80, 0x80  // F
*/
static uint8_t FONT_SPRITES[16][5] = {
    {0xF0, 0x90, 0x90, 0x90, 0xF0}, // 0
    {0x20, 0x60, 0x20, 0x20, 0x70}, // 1
    {0xF0, 0x10, 0xF0, 0x80, 0xF0}, // 2
    {0xF0, 0x10, 0xF0, 0x10, 0xF0}, // 3
    {0x90, 0x90, 0xF0, 0x10, 0x10}, // 4
    {0xF0, 0x80, 0xF0, 0x10, 0xF0}, // 5
    {0xF0, 0x80, 0xF0, 0x90, 0xF0}, // 6
    {0xF0, 0x10, 0x20, 0x40, 0x40}, // 7
    {0xF0, 0x90, 0xF0, 0x90, 0xF0}, // 8
    {0xF0, 0x90, 0xF0, 0x10, 0xF0}, // 9
    {0xF0, 0x90, 0xF0, 0x90, 0x90}, // A
    {0xE0, 0x90, 0xE0, 0x90, 0xE0}, // B
    {0xF0, 0x80, 0x80, 0x80, 0xF0}, // C
    {0xE0, 0x90, 0x90, 0x90, 0xE0}, // D
    {0xF0, 0x80, 0xF0, 0x80, 0xF0}, // E
    {0xF0, 0x80, 0xF0, 0x80, 0x80}  // F
};

class Chip8 {
public:
    Chip8();

    /**
     * @brief 
     * 加载ROM
     */
    void load_rom(const uint8_t *buffer, size_t size);

    /**
     * @brief 
     * 从当前程序计数器（PC）中获取指令
     */
    uint16_t fetch();


    /**
     * @brief 
     * 解码并执行指令
     */
    void decode_execute();



    void run();

    /**
     * @brief 
     * 显示屏模拟
     */
    Display display_;
private:
    /**
     * @brief
     * 程序从 0x200 开始加载
     * 0x000 - 0x1FF 为系统保留区域
     * 0x050 - 0x09F 为字体区域
     * 0x200 - 0xFFF 为程序区域
     */
    uint8_t  memory_[4096]{0}; // 内存大小为 4KB
    uint16_t index_reg_{0};    // 12 位索引寄存器 ir
    uint16_t pc_{0x200};           // 12 位程序计数器 pc
    uint8_t  sp_{0};           // 栈指针
    uint8_t  v_[16]{0};        // 16 个 8 位通用寄存器 v0 - vF
    uint16_t stack_[16]{0};    // 16 位地址栈
    uint8_t  delay_timer_{0};  // 延时计数器
    Instruction instruction_{0};  // 当前指令

};

#endif
